Results for running unit tests:
unittest1.c:
curse card good! 
estate card good! 
gold card good! 
adventurer card good! 
council room card good! 
smithy card good! 
remodel card good! 
village card good! 
All tests passed! 
File 'dominion.c'
Lines executed:1.78% of 562
Branches executed:6.75% of 415
Taken at least once:1.93% of 415
Calls executed:0.00% of 95
Creating 'dominion.c.gcov'

unittest2.c:
Correct checking of number of players! 
currect number of estate! 
correct number of curse! 
correct number of copper! 
correct outpost number! 
test successful! 
File 'dominion.c'
Lines executed:17.97% of 562
Branches executed:23.13% of 415
Taken at least once:15.18% of 415
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

unittest3.c:
Not enough coins! 
No more buy actions! 
No card of that type! 
Buy amount is correct at 0 
Coins amount is correct at 10 
Test successful! 
File 'dominion.c'
Lines executed:22.06% of 562
Branches executed:26.02% of 415
Taken at least once:17.35% of 415
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

unittest4.c:
Gold count good at 10 
smithy count good at 10 
Adventurer count correct at 0 
Curse count good at  20 
Council room correct at  45 
Test has passed! 
File 'dominion.c'
Lines executed:22.06% of 562
Branches executed:26.02% of 415
Taken at least once:17.35% of 415
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'

cardtest1.c:
smithy found! 
Test failed! 
File 'dominion.c'
Lines executed:29.00% of 562
Branches executed:35.42% of 415
Taken at least once:20.00% of 415
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

cardtest2.c:
council room found! In position: 5 
Number of cards in hand right now: 6 
Number of buys right now: 0 
The number of buys before is correct. 
Number of buys right now: 1 
After card played, num of buys still correct. 
Test failed! 
File 'dominion.c'
Lines executed:31.49% of 562
Branches executed:36.87% of 415
Taken at least once:21.69% of 415
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

cardtest3.c:
great hall found! In position: 5 
Current number of cards: 6 
Current number of actions: 1 
great hall will be played! 
Draw card has been successful! 
Increase in actions has been successful! 
Test is successful! 
File 'dominion.c'
Lines executed:32.38% of 562
Branches executed:36.87% of 415
Taken at least once:22.17% of 415
Calls executed:27.37% of 95
Creating 'dominion.c.gcov'

cardtest4.c:
adventurer found! At position: 5 
Enough cards to draw 
Current number of cards in hand: 6 
Current number of treasure cards: 4 
Adventure card will now be played 
New number of cards in hand: 8 
New number of treasure cards: 6 
New treasure cards correct amount 
Test unsuccessful! 
File 'dominion.c'
Lines executed:34.34% of 562
Branches executed:38.80% of 415
Taken at least once:23.61% of 415
Calls executed:29.47% of 95
Creating 'dominion.c.gcov'

Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:8.70% of 207
Branches executed:13.14% of 175
Taken at least once:2.86% of 175
Calls executed:10.91% of 55

Function 'stewardCard'
Lines executed:0.00% of 10
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 5

Function 'villageCard'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'council_roomCard'
Lines executed:100.00% of 8
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
Calls executed:100.00% of 3

Function 'smithyCard'
Lines executed:80.00% of 5
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:50.00% of 2

Function 'adventurerCard'
Lines executed:60.00% of 15
Branches executed:66.67% of 12
Taken at least once:41.67% of 12
Calls executed:50.00% of 2

Function 'getCost'
Lines executed:36.67% of 30
Branches executed:100.00% of 28
Taken at least once:32.14% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 4

Function 'playCard'
Lines executed:71.43% of 14
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
Calls executed:100.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:87.10% of 62
Branches executed:100.00% of 46
Taken at least once:84.78% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:34.34% of 562
Branches executed:38.80% of 415
Taken at least once:23.61% of 415
Calls executed:29.47% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 225 returned 100% blocks executed 83%
      225:    8:int compare(const void* a, const void* b) {
      225:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      225:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       60:   12:    return -1;
      165:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 91%
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
call    0 returned 100%
        6:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        5:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        5:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        5:   95:      state->supplyCount[estate] = 12;
        5:   96:      state->supplyCount[duchy] = 12;
        5:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       18:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        9:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       41:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       20:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
       15:  140:      state->deckCount[i] = 0;
       60:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       45:  143:	  state->deck[i][j] = estate;
       45:  144:	  state->deckCount[i]++;
        -:  145:	}
      120:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      105:  148:	  state->deck[i][j] = copper;
      105:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       20:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
       15:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       20:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       15:  166:      state->handCount[i] = 0;
       15:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 15 returned 100% blocks executed 94%
       15:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       15:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       15:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       15:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      180:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      150:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      150:  216:    newDeck[newDeckPos] = state->deck[player][card];
      150:  217:    newDeckPos++;
      481:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
      331:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      150:  221:    state->deckCount[player]--;
        -:  222:  }
      165:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      150:  224:    state->deck[player][i] = newDeck[i];
      150:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       15:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 4 returned 100% blocks executed 73%
        4:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        4:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        4:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        4:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        4:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        4:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        4:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        4:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        4:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        4:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 8 returned 100% blocks executed 100%
        8:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        8:  280:  who = state->whoseTurn;
        -:  281:
        8:  282:  if (state->numBuys < 1){
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        7:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        6:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        5:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        5:  297:    gainCard(supplyPos, state, 2, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        5:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        5:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        5:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 57 returned 100% blocks executed 100%
       57:  311:int numHandCards(struct gameState *state) {
       57:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 51 returned 100% blocks executed 100%
       51:  315:int handCard(int handPos, struct gameState *state) {
       51:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       51:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 17 returned 100% blocks executed 100%
       17:  320:int supplyCount(int card, struct gameState *state) {
       17:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 113 returned 100% blocks executed 100%
      113:  346:int whoseTurn(struct gameState *state) {
      113:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 35 returned 100% blocks executed 38%
       35:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       35:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       35:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       35:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       35:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       35:  576:    state->deckCount[player]--;
       35:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       35:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 19 returned 100% blocks executed 37%
       19:  583:int getCost(int cardNumber)
        -:  584:{
       19:  585:  switch( cardNumber ) 
branch  0 taken 16%
branch  1 taken 5%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 11%
branch  7 taken 16%
branch  8 taken 16%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 5%
branch 13 taken 16%
branch 14 taken 5%
branch 15 taken 0%
branch 16 taken 11%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        3:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        3:  602:      return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/****************************************************
        -:  647:Refactored code functions
        -:  648:****************************************************/
function adventurerCard called 1 returned 100% blocks executed 64%
        1:  649:void adventurerCard(int drawntreasure, int currentPlayer, struct gameState *state, int z, int *temphand)
        -:  650:{
        -:  651:
        -:  652:  //top card of hand is most recently drawn card.
        -:  653: 
        -:  654:
        4:  655:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  656:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  657:      shuffle(currentPlayer, state);
call    0 never executed
        -:  658:    }
        2:  659:    drawCard(currentPlayer, state);
call    0 returned 100%
        2:  660:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        2:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  662:      drawntreasure++;
        -:  663:    else{
    #####:  664:      temphand[z]=cardDrawn;
    #####:  665:      state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
    #####:  666:      z++;                              //bug introduced: increment instead of decrement
        -:  667:    }
        -:  668:  }
        2:  669:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  670:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  671:    z=z-1;
        -:  672:  }
        1:  673:}
        -:  674:
function smithyCard called 1 returned 100% blocks executed 67%
        1:  675:void smithyCard(int currentPlayer, struct gameState *state, int handPos)
        -:  676:{
        1:  677:      for (int i = 0; i == 3; i++)   //bug introduced: draws 4 times instead of 3
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  678:  {
    #####:  679:    drawCard(currentPlayer, state);
call    0 never executed
        -:  680:  }
        -:  681:      
        -:  682:      //discard card from hand
        1:  683:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  684:  
        1:  685:}
        -:  686:
function council_roomCard called 1 returned 100% blocks executed 100%
        1:  687:void council_roomCard(int currentPlayer, struct gameState *state, int handPos)
        -:  688:{
        5:  689:  for (int i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  690:  {
        4:  691:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  692:  }
        -:  693:      
        -:  694:      //+1 Buy
        1:  695:      state->numBuys++;
        -:  696:      
        -:  697:      //Each other player draws a card
        4:  698:  for (int i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  699:  {
        3:  700:        drawCard(i, state);     //bug introduced: no if statement to check for current player
call    0 returned 100%
        -:  701:  }
        -:  702:      
        -:  703:      //put played card in played card pile
        1:  704:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  705:      
        1:  706:}
        -:  707:
function villageCard called 0 returned 0% blocks executed 0%
    #####:  708:void villageCard(int currentPlayer, struct gameState *state, int handPos)
        -:  709:{
        -:  710:      //+1 Card
    #####:  711:      drawCard(currentPlayer, state);
call    0 never executed
        -:  712:      
        -:  713:      //+2 Actions
    #####:  714:      state->numActions = state->numActions + 2;
        -:  715:      
        -:  716:      //discard played card from hand
    #####:  717:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  718:}
        -:  719:
function stewardCard called 0 returned 0% blocks executed 0%
    #####:  720:void stewardCard(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos)
        -:  721:{
    #####:  722:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  723:  {
        -:  724:    //+2 cards
    #####:  725:    drawCard(currentPlayer, state);
call    0 never executed
    #####:  726:    drawCard(currentPlayer, state);
call    0 never executed
        -:  727:  }
    #####:  728:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  729:  {
        -:  730:    //+2 coins
    #####:  731:    state->coins = state->coins + 2;
        -:  732:  }
        -:  733:      else
        -:  734:  {
        -:  735:    //trash 2 cards in hand
    #####:  736:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  737:    discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  738:
        -:  739:          //discard card from hand
    #####:  740:    discardCard(handPos, currentPlayer, state, 0);          //bug introduced: only discards steward in 3rd choice
call    0 never executed
        -:  741:  }
        -:  742:      
        -:  743:
    #####:  744:  }
        -:  745:
function cardEffect called 4 returned 100% blocks executed 6%
        4:  746:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  747:{
        -:  748:  int i;
        -:  749:  int j;
        -:  750:  int k;
        -:  751:  int x;
        -:  752:  int index;
        4:  753:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  754:  int nextPlayer = currentPlayer + 1;
        -:  755:
        4:  756:  int tributeRevealedCards[2] = {-1, -1};
        -:  757:  int temphand[MAX_HAND];// moved above the if statement
        4:  758:  int drawntreasure=0;
        -:  759:  //int cardDrawn;
        4:  760:  int z = 0;// this is the counter for the temp hand
        4:  761:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  762:    nextPlayer = 0;
        -:  763:  }
        -:  764:  
        -:  765:	
        -:  766:  //uses switch to select card and perform actions
        4:  767:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  768:    {
        -:  769:		
        -:  770:    case adventurer:
        -:  771:
        1:  772:      adventurerCard(drawntreasure, currentPlayer, state, z, temphand);
call    0 returned 100%
        1:  773:      return 0;
        -:  774:
        -:  775:    case council_room:
        -:  776:
        1:  777:      council_roomCard(currentPlayer, state, handPos);
call    0 returned 100%
        1:  778:      return 0;
        -:  779:
        -:  780:    case feast:
        -:  781:      //gain card with cost up to 5
        -:  782:      //Backup hand
    #####:  783:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  784:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  785:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  786:      }
        -:  787:      //Backup hand
        -:  788:
        -:  789:      //Update Coins for Buy
    #####:  790:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  791:      x = 1;//Condition to loop on
    #####:  792:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  793:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  794:	  if (DEBUG)
        -:  795:	    printf("None of that card left, sorry!\n");
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  799:	  }
        -:  800:	}
    #####:  801:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  802:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  803:
        -:  804:	  if (DEBUG){
        -:  805:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  806:	  }
        -:  807:	}
        -:  808:	else{
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  812:	  }
        -:  813:
    #####:  814:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  815:	  x = 0;//No more buying cards
        -:  816:
        -:  817:	  if (DEBUG){
        -:  818:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:	  }
        -:  820:
        -:  821:	}
        -:  822:      }     
        -:  823:
        -:  824:      //Reset Hand
    #####:  825:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  826:	state->hand[currentPlayer][i] = temphand[i];
    #####:  827:	temphand[i] = -1;
        -:  828:      }
        -:  829:      //Reset Hand
        -:  830:      			
    #####:  831:      return 0;
        -:  832:			
        -:  833:    case gardens:
    #####:  834:      return -1;
        -:  835:			
        -:  836:    case mine:
    #####:  837:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  838:
    #####:  839:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:		
    #####:  844:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  850:	{
    #####:  851:	  return -1;
        -:  852:	}
        -:  853:
    #####:  854:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  855:
        -:  856:      //discard card from hand
    #####:  857:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  858:
        -:  859:      //discard trashed card
    #####:  860:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  861:	{
    #####:  862:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  863:	    {
    #####:  864:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  865:	      break;
        -:  866:	    }
        -:  867:	}
        -:  868:			
    #####:  869:      return 0;
        -:  870:			
        -:  871:    case remodel:
    #####:  872:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  873:
    #####:  874:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  875:	{
    #####:  876:	  return -1;
        -:  877:	}
        -:  878:
    #####:  879:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  880:
        -:  881:      //discard card from hand
    #####:  882:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  883:
        -:  884:      //discard trashed card
    #####:  885:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  886:	{
    #####:  887:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  890:	      break;
        -:  891:	    }
        -:  892:	}
        -:  893:
        -:  894:
    #####:  895:      return 0;
        -:  896:		
        -:  897:      case smithy:
        -:  898:
        1:  899:        smithyCard(currentPlayer, state, handPos);
call    0 returned 100%
        1:  900:        return 0;
        -:  901:
        -:  902:      case village:
        -:  903:
    #####:  904:        villageCard(currentPlayer, state, handPos);
call    0 never executed
    #####:  905:        return 0;
        -:  906:		
        -:  907:    case baron:
    #####:  908:      state->numBuys++;//Increase buys by 1!
    #####:  909:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  910:	int p = 0;//Iterator for hand!
    #####:  911:	int card_not_discarded = 1;//Flag for discard set!
    #####:  912:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  913:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  914:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  915:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  916:	    state->discardCount[currentPlayer]++;
    #####:  917:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  918:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  919:	    }
    #####:  920:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  921:	    state->handCount[currentPlayer]--;
    #####:  922:	    card_not_discarded = 0;//Exit the loop
        -:  923:	  }
    #####:  924:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  925:	    if(DEBUG) {
        -:  926:	      printf("No estate cards in your hand, invalid choice\n");
        -:  927:	      printf("Must gain an estate if there are any\n");
        -:  928:	    }
    #####:  929:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  930:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  931:	      state->supplyCount[estate]--;//Decrement estates
    #####:  932:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  933:		isGameOver(state);
call    0 never executed
        -:  934:	      }
        -:  935:	    }
    #####:  936:	    card_not_discarded = 0;//Exit the loop
        -:  937:	  }
        -:  938:			    
        -:  939:	  else{
    #####:  940:	    p++;//Next card
        -:  941:	  }
        -:  942:	}
        -:  943:      }
        -:  944:			    
        -:  945:      else{
    #####:  946:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  948:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  949:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  950:	    isGameOver(state);
call    0 never executed
        -:  951:	  }
        -:  952:	}
        -:  953:      }
        -:  954:	    
        -:  955:      
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case great_hall:
        -:  959:      //+1 Card
        1:  960:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  961:			
        -:  962:      //+1 Actions
        1:  963:      state->numActions++;
        -:  964:			
        -:  965:      //discard card from hand
        1:  966:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  967:      return 0;
        -:  968:		
        -:  969:    case minion:
        -:  970:      //+1 action
    #####:  971:      state->numActions++;
        -:  972:			
        -:  973:      //discard card from hand
    #####:  974:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  975:			
    #####:  976:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  977:	{
    #####:  978:	  state->coins = state->coins + 2;
        -:  979:	}
        -:  980:			
    #####:  981:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  982:	{
        -:  983:	  //discard hand
    #####:  984:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  985:	    {
    #####:  986:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  987:	    }
        -:  988:				
        -:  989:	  //draw 4
    #####:  990:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  991:	    {
    #####:  992:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  993:	    }
        -:  994:				
        -:  995:	  //other players discard hand and redraw if hand size > 4
    #####:  996:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  997:	    {
    #####:  998:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  999:		{
    #####: 1000:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1001:		    {
        -: 1002:		      //discard hand
    #####: 1003:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1004:			{
    #####: 1005:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1006:			}
        -: 1007:							
        -: 1008:		      //draw 4
    #####: 1009:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1010:			{
    #####: 1011:			  drawCard(i, state);
call    0 never executed
        -: 1012:			}
        -: 1013:		    }
        -: 1014:		}
        -: 1015:	    }
        -: 1016:				
        -: 1017:	}
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case steward:
        -: 1021:
    #####: 1022:      stewardCard(choice1, choice2, choice3, currentPlayer, state, handPos);
call    0 never executed
    #####: 1023:      return 0;
        -: 1024:		
        -: 1025:    case tribute:
    #####: 1026:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1027:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1028:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	  state->deckCount[nextPlayer]--;
        -: 1030:	}
    #####: 1031:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1033:	  state->discardCount[nextPlayer]--;
        -: 1034:	}
        -: 1035:	else{
        -: 1036:	  //No Card to Reveal
        -: 1037:	  if (DEBUG){
        -: 1038:	    printf("No cards to reveal\n");
        -: 1039:	  }
        -: 1040:	}
        -: 1041:      }
        -: 1042:	    
        -: 1043:      else{
    #####: 1044:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1045:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1046:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1047:	    state->deckCount[nextPlayer]++;
    #####: 1048:	    state->discard[nextPlayer][i] = -1;
    #####: 1049:	    state->discardCount[nextPlayer]--;
        -: 1050:	  }
        -: 1051:			    
    #####: 1052:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1053:	} 
    #####: 1054:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:	state->deckCount[nextPlayer]--;
    #####: 1057:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
        -: 1060:      }    
        -: 1061:		       
    #####: 1062:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1063:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1064:	state->playedCardCount++;
    #####: 1065:	tributeRevealedCards[1] = -1;
        -: 1066:      }
        -: 1067:
    #####: 1068:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1069:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1070:	  state->coins += 2;
        -: 1071:	}
        -: 1072:		    
    #####: 1073:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1074:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1075:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1076:	}
        -: 1077:	else{//Action Card
    #####: 1078:	  state->numActions = state->numActions + 2;
        -: 1079:	}
        -: 1080:      }
        -: 1081:	    
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case ambassador:
    #####: 1085:      j = 0;		//used to check if player has enough cards to discard
        -: 1086:
    #####: 1087:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1088:	{
    #####: 1089:	  return -1;				
        -: 1090:	}
        -: 1091:
    #####: 1092:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;
        -: 1095:	}
        -: 1096:
    #####: 1097:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1100:	    {
    #####: 1101:	      j++;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  return -1;				
        -: 1107:	}
        -: 1108:
        -: 1109:      if (DEBUG) 
        -: 1110:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1111:
        -: 1112:      //increase supply count for choosen card by amount being discarded
    #####: 1113:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1114:			
        -: 1115:      //each other player gains a copy of revealed card
    #####: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1121:	    }
        -: 1122:	}
        -: 1123:
        -: 1124:      //discard played card from hand
    #####: 1125:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1126:
        -: 1127:      //trash copies of cards returned to supply
    #####: 1128:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	    {
    #####: 1132:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1133:		{
    #####: 1134:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1135:		  break;
        -: 1136:		}
        -: 1137:	    }
        -: 1138:	}			
        -: 1139:
    #####: 1140:      return 0;
        -: 1141:		
        -: 1142:    case cutpurse:
        -: 1143:
    #####: 1144:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1145:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
    #####: 1147:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1148:	    {
    #####: 1149:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1150:		{
    #####: 1151:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1152:		    {
    #####: 1153:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1154:		      break;
        -: 1155:		    }
    #####: 1156:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1157:		    {
    #####: 1158:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1159:			{
        -: 1160:			  if (DEBUG)
        -: 1161:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1162:			}	
    #####: 1163:		      break;
        -: 1164:		    }		
        -: 1165:		}
        -: 1166:					
        -: 1167:	    }
        -: 1168:				
        -: 1169:	}				
        -: 1170:
        -: 1171:      //discard played card from hand
    #####: 1172:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1173:
    #####: 1174:      return 0;
        -: 1175:
        -: 1176:		
        -: 1177:    case embargo: 
        -: 1178:      //+2 Coins
    #####: 1179:      state->coins = state->coins + 2;
        -: 1180:			
        -: 1181:      //see if selected pile is in play
    #####: 1182:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1183:	{
    #####: 1184:	  return -1;
        -: 1185:	}
        -: 1186:			
        -: 1187:      //add embargo token to selected supply pile
    #####: 1188:      state->embargoTokens[choice1]++;
        -: 1189:			
        -: 1190:      //trash card
    #####: 1191:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1192:      return 0;
        -: 1193:		
        -: 1194:    case outpost:
        -: 1195:      //set outpost flag
    #####: 1196:      state->outpostPlayed++;
        -: 1197:			
        -: 1198:      //discard card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case salvager:
        -: 1203:      //+1 buy
    #####: 1204:      state->numBuys++;
        -: 1205:			
    #####: 1206:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1207:	{
        -: 1208:	  //gain coins equal to trashed card
    #####: 1209:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1210:	  //trash card
    #####: 1211:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1212:	}
        -: 1213:			
        -: 1214:      //discard card
    #####: 1215:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1216:      return 0;
        -: 1217:		
        -: 1218:    case sea_hag:
    #####: 1219:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1220:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1221:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1222:	  state->discardCount[i]++;
    #####: 1223:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1224:	}
        -: 1225:      }
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case treasure_map:
        -: 1229:      //search hand for another treasure_map
    #####: 1230:      index = -1;
    #####: 1231:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1232:	{
    #####: 1233:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1234:	    {
    #####: 1235:	      index = i;
    #####: 1236:	      break;
        -: 1237:	    }
        -: 1238:	}
    #####: 1239:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
        -: 1241:	  //trash both treasure cards
    #####: 1242:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1243:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1244:
        -: 1245:	  //gain 4 Gold cards
    #####: 1246:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1247:	    {
    #####: 1248:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1249:	    }
        -: 1250:				
        -: 1251:	  //return success
    #####: 1252:	  return 1;
        -: 1253:	}
        -: 1254:			
        -: 1255:      //no second treasure_map found in hand
    #####: 1256:      return -1;
        -: 1257:    }
        -: 1258:	
    #####: 1259:  return -1;
        -: 1260:}
        -: 1261:
function discardCard called 3 returned 100% blocks executed 89%
        3: 1262:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1263:{
        -: 1264:	
        -: 1265:  //if card is not trashed, added to Played pile 
        3: 1266:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1267:    {
        -: 1268:      //add card to played pile
        3: 1269:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1270:      state->playedCardCount++;
        -: 1271:    }
        -: 1272:	
        -: 1273:  //set played card to -1
        3: 1274:  state->hand[currentPlayer][handPos] = -1;
        -: 1275:	
        -: 1276:  //remove card from player's hand
        3: 1277:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
        1: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        2: 1282:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1283:    {
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:  else 	
        -: 1288:    {
        -: 1289:      //replace discarded card with last card in hand
        2: 1290:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1291:      //set last card to -1
        2: 1292:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1293:      //reduce number of cards in hand
        2: 1294:      state->handCount[currentPlayer]--;
        -: 1295:    }
        -: 1296:	
        3: 1297:  return 0;
        -: 1298:}
        -: 1299:
function gainCard called 5 returned 100% blocks executed 70%
        5: 1300:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1301:{
        -: 1302:  //Note: supplyPos is enum of choosen card
        -: 1303:	
        -: 1304:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1305:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1306:    {
    #####: 1307:      return -1;
        -: 1308:    }
        -: 1309:	
        -: 1310:  //added card for [whoseTurn] current player:
        -: 1311:  // toFlag = 0 : add to discard
        -: 1312:  // toFlag = 1 : add to deck
        -: 1313:  // toFlag = 2 : add to hand
        -: 1314:
        5: 1315:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1316:    {
    #####: 1317:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1318:      state->deckCount[player]++;
        -: 1319:    }
        5: 1320:  else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1321:    {
        5: 1322:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1323:      state->handCount[player]++;
        -: 1324:    }
        -: 1325:  else
        -: 1326:    {
    #####: 1327:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1328:      state->discardCount[player]++;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //decrease number in supply pile
        5: 1332:  state->supplyCount[supplyPos]--;
        -: 1333:	 
        5: 1334:  return 0;
        -: 1335:}
        -: 1336:
function updateCoins called 9 returned 100% blocks executed 82%
        9: 1337:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1338:{
        -: 1339:  int i;
        -: 1340:	
        -: 1341:  //reset coin count
        9: 1342:  state->coins = 0;
        -: 1343:
        -: 1344:  //add coins for each Treasure card in player's hand
       63: 1345:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -: 1346:    {
       54: 1347:      if (state->hand[player][i] == copper)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1348:	{
       42: 1349:	  state->coins += 1;
        -: 1350:	}
       12: 1351:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1352:	{
    #####: 1353:	  state->coins += 2;
        -: 1354:	}
       12: 1355:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1356:	{
    #####: 1357:	  state->coins += 3;
        -: 1358:	}	
        -: 1359:    }	
        -: 1360:
        -: 1361:  //add bonus
        9: 1362:  state->coins += bonus;
        -: 1363:
        9: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367:
        -: 1368://end of dominion.c
        -: 1369:
